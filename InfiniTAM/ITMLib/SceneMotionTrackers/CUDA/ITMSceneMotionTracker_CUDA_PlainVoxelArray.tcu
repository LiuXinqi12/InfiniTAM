//  ================================================================
//  Created by Gregory Kramida on 7/26/18.
//  Copyright (c) 2018-2025 Gregory Kramida
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ================================================================
#pragma once


#include "../../Engines/Manipulation/CUDA/ITMSceneTraversal_CUDA_PlainVoxelArray.h"
#include "ITMSceneMotionTracker_CUDA.h"
#include "../Shared/ITMSceneMotionTracker_Functors.h"

namespace {



template<typename TVoxelLive, typename TVoxelCanonical>
__global__ void
computeGradientDataTerm(TVoxelLive* liveVoxels, TVoxelCanonical* canonicalVoxels,
                        const ITMLib::ITMPlainVoxelArray::ITMVoxelArrayInfo* liveIndexData,
                        int sourceSdfIndex, float sdfToVoxelsFactorSquared) {
	int x = blockIdx.x * blockDim.x + threadIdx.x;
	int y = blockIdx.y * blockDim.y + threadIdx.y;
	int z = blockIdx.z * blockDim.z + threadIdx.z;

	int locId = x + y * liveIndexData->size.x + z * liveIndexData->size.x * liveIndexData->size.y;

	Vector3i voxelPosition;

	voxelPosition.x = x + liveIndexData->offset.x;
	voxelPosition.y = y + liveIndexData->offset.y;
	voxelPosition.z = z + liveIndexData->offset.z;


	TVoxelLive& voxelLive = liveVoxels[locId];
	TVoxelCanonical& voxelCanonical = canonicalVoxels[locId];
	if(!VoxelIsConsideredForTracking(voxelCanonical, voxelLive, sourceSdfIndex)
		|| !VoxelIsConsideredForDataTerm(voxelCanonical, voxelLive, sourceSdfIndex)) return;

	Vector3f localDataEnergyGradient;
	float localDataEnergy;

	ITMLib::ITMPlainVoxelArray::IndexCache liveCache;

	computeDataTermUpdateContribution(localDataEnergyGradient, localDataEnergy, liveCache,
	                                  voxelPosition, liveVoxels, liveIndexData, sourceSdfIndex, voxelLive.sdf,
	                                  voxelCanonical.sdf, sdfToVoxelsFactorSquared);


};
}


using namespace ITMLib;


template<typename TVoxelCanonical, typename TVoxelLive>
ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::ITMSceneMotionTracker_CUDA()
		: ITMSceneMotionTracker<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>() {

}

template<typename TVoxelCanonical, typename TVoxelLive>
void ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::ClearOutFlowWarp(
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene) {
	ITMSceneTraversalEngine<TVoxelCanonical, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutFlowWarpStaticFunctor<TVoxelCanonical> >(canonicalScene);

}

template<typename TVoxelCanonical, typename TVoxelLive>
void ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::AddFlowWarpToWarp(
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene, bool clearFlowWarp) {

	AddFlowWarpToWarp_common<TVoxelCanonical, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(canonicalScene,
	                                                                                                clearFlowWarp);
}

template<typename TVoxelCanonical, typename TVoxelLive>
void ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::CalculateWarpGradient(
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene,
		ITMScene<TVoxelLive, ITMPlainVoxelArray>* liveScene, int sourceFieldIndex, bool restrictZTrackingForDebugging) {
	ITMSceneTraversalEngine<TVoxelCanonical, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<ClearOutGradientStaticFunctor<TVoxelCanonical> >(canonicalScene);

	TVoxelLive* liveVoxels = liveScene->localVBA.GetVoxelBlocks();
	TVoxelCanonical* canonicalVoxels = canonicalScene->localVBA.GetVoxelBlocks();
	const ITMPlainVoxelArray::ITMVoxelArrayInfo* arrayInfo = liveScene->index.getIndexData();

	dim3 cudaBlockSize(8, 8, 8);
	dim3 gridSize(liveScene->index.getVolumeSize().x / cudaBlockSize.x,
	              liveScene->index.getVolumeSize().y / cudaBlockSize.y,
	              liveScene->index.getVolumeSize().z / cudaBlockSize.z);

	computeGradientDataTerm<TVoxelLive, TVoxelCanonical>
			<< < gridSize, cudaBlockSize >> >
	                       (liveVoxels, canonicalVoxels, arrayInfo, sourceFieldIndex, this->parameters.sdfToVoxelsFactorSquared);

	DIEWITHEXCEPTION_REPORTLOCATION("Implementation pending");

}

template<typename TVoxelCanonical, typename TVoxelLive>
void ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::SmoothWarpGradient(
		ITMScene<TVoxelLive, ITMPlainVoxelArray>* liveScene,
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene, int sourceFieldIndex) {
	if (this->switches.enableGradientSmoothing) {
		SmoothWarpGradient_common<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>(
				liveScene, canonicalScene, sourceFieldIndex);
	}
}

template<typename TVoxelCanonical, typename TVoxelLive>
float ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::UpdateWarps(
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene,
		ITMScene<TVoxelLive, ITMPlainVoxelArray>* liveScene, int sourceSdfIndex) {
	return UpdateWarps_common<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>
			(canonicalScene, liveScene, sourceSdfIndex, this->parameters.gradientDescentLearningRate,
			 this->switches.enableGradientSmoothing);
}

template<typename TVoxelCanonical, typename TVoxelLive>
void ITMSceneMotionTracker_CUDA<TVoxelCanonical, TVoxelLive, ITMPlainVoxelArray>::ResetWarps(
		ITMScene<TVoxelCanonical, ITMPlainVoxelArray>* canonicalScene) {
	ITMSceneTraversalEngine<TVoxelCanonical, ITMPlainVoxelArray, ITMLibSettings::DEVICE_CUDA>::template
	StaticVoxelTraversal<WarpClearFunctor<TVoxelCanonical, TVoxelCanonical::hasCumulativeWarp>>(canonicalScene);
}
